openapi: 3.0.1
info:
  title: Deluge API
  description: 'Deluge API lets you create, configure and launch load tests.
    You can find out more about Deluge
    at [https://github.com/ofux/deluge](https://github.com/ofux/deluge).'
  #termsOfService: http://swagger.io/terms/
  #contact:
  #  email: apiteam@swagger.io
  license:
    name: GNU Affero General Public License v3.0
    url: https://www.gnu.org/licenses/agpl-3.0.html
  version: 1.0.0
externalDocs:
  description: Github
  url: https://github.com/ofux/deluge
#servers:
#  - url: https://petstore.swagger.io/v2
#  - url: http://petstore.swagger.io/v2
tags:
  - name: job
    description: A job is a run/running deluge
  - name: deluge
    description: A deluge defines which scenario(s) to execute and their respective configuration
  - name: scenario
    description: A scenario defines the script to execute from each virtual user



paths:
  /deluges:
    get:
      tags:
        - deluge
      summary: Get all your deluges metadata
      description: Returns metadata of all your deluges
      operationId: getAllDeluges
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DelugeMetadata'
    put:
      tags:
        - deluge
      summary: Update an existing deluge
      operationId: updateDeluge
      requestBody:
        description: Deluge script written in DelugeDSL that needs to be updated
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Deluge'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid deluge (fails to compile)
          content: {}
        404:
          description: Invalid ID supplied
          content: {}
    post:
      tags:
        - deluge
      summary: Add a new deluge
      operationId: addDeluge
      requestBody:
        description: Deluge script written in DelugeDSL that needs to be added
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Deluge'
        required: true
      responses:
        201:
          description: successful operation
          content: {}
        400:
          description: Invalid deluge (fails to compile)
          content: {}
        409:
          description: Supplied ID already exists
          content: {}
  /deluges/{delugeId}:
    get:
      tags:
        - deluge
      summary: Find deluge by ID
      description: Returns a single deluge
      operationId: getDelugeById
      parameters:
        - name: delugeId
          in: path
          description: ID of deluge to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Deluge'
        404:
          description: Deluge not found
          content: {}
    delete:
      tags:
        - deluge
      summary: Delete deluge by ID
      description: Deletes a single deluge
      operationId: deleteDelugeById
      parameters:
        - name: delugeId
          in: path
          description: ID of deluge to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content: {}
        404:
          description: Deluge not found
          content: {}


  /scenarios:
    get:
      tags:
        - scenario
      summary: Get all your scenarios metadata
      description: Returns metadata of all your scenarios
      operationId: getAllScenarios
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScenarioMetadata'
    put:
      tags:
        - scenario
      summary: Update an existing scenario
      operationId: updateScenario
      requestBody:
        description: Scenario script written in DelugeDSL that needs to be updated
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Scenario'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid scenario (fails to compile)
          content: {}
        404:
          description: Invalid ID supplied
          content: {}
    post:
      tags:
        - scenario
      summary: Add a new scenario
      operationId: addScenario
      requestBody:
        description: Scenario script written in DelugeDSL that needs to be added
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Scenario'
        required: true
      responses:
        201:
          description: successful operation
          content: {}
        400:
          description: Invalid scenario (fails to compile)
          content: {}
        409:
          description: Supplied ID already exists
          content: {}
  /scenarios/{scenarioId}:
    get:
      tags:
        - scenario
      summary: Find scenario by ID
      description: Returns a single scenario
      operationId: getScenarioById
      parameters:
        - name: scenarioId
          in: path
          description: ID of scenario to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Scenario'
        404:
          description: Scenario not found
          content: {}
    delete:
      tags:
        - scenario
      summary: Delete scenario by ID
      description: Deletes a single scenario
      operationId: deleteScenarioById
      parameters:
        - name: scenarioId
          in: path
          description: ID of scenario to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content: {}
        404:
          description: Scenario not found
          content: {}


  /jobs:
    get:
      tags:
        - job
      summary: Get all your jobs metadata
      description: Returns metadata of all your jobs
      operationId: getAllJobs
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobMetadata'
    post:
      tags:
        - job
      summary: Start a new job
      operationId: startJob
      requestBody:
        description: Job description
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCreation'
        required: true
      responses:
        202:
          description: job started
          $ref: '#/components/schemas/JobMetadata'
        400:
          description: Invalid job
          content: {}
        404:
          description: Job's deluge not found
          content: {}
  /jobs/{jobId}:
    get:
      tags:
        - job
      summary: Get job report
      description: Returns a single job report
      operationId: getJobById
      parameters:
        - name: jobId
          in: path
          description: ID of job to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: Job report was successfully and fully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobReport'
        206:
          description: Job report was successfully retrieved but is partial. This happens if job is still running, or if job's associated deluge and/or scenarios have been deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobReport'
        404:
          description: Job not found or no report was created yet
          content: {}
  /jobs/interrupt/{jobId}:
    put:
      tags:
        - job
      summary: Interrupt Job by ID
      description: Interrupts a Job
      operationId: interruptJobById
      parameters:
        - name: jobId
          in: path
          description: ID of job to interrupt
          required: true
          schema:
            type: string
      responses:
        202:
          description: job is being interrupted
          content: {}



components:
  schemas:
    Deluge:
      type: string
      description: Deluge script written in DelugeDSL
      format: Deluge DSL
      example: |
        deluge("delugeId", "Deluge name", "20s", {
          "scenario1Id": {
           "concurrent": 100,
           "delay": "100ms"
          },
          "scenario2Id": {
           "concurrent": 20,
           "delay": "1000ms"
          }
        });
    DelugeMetadata:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Scenario:
      type: string
      description: Scenario script written in DelugeDSL
      format: Deluge DSL
      example: |
        scenario("scenarioId", "Scenario name", function () {
          http("My request", {
            "url": "http://localhost:8080/hello/foo"
          });
        });
    ScenarioMetadata:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    JobCreation:
      type: object
      properties:
        delugeId:
          type: string
        webhook:
          type: string
    JobMetadata:
      type: object
      properties:
        id:
          type: string
        delugeId:
          type: string
        webhook:
          type: string
    JobReport:
      type: object
      properties:
        id:
          type: string
        delugeId:
          type: string
        delugeName:
          type: string
        status:
          $ref: '#/components/schemas/DelugeStatus'
        globalDuration:
          $ref: '#/components/schemas/Duration'
        scenarios:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JobScenarioReport'
    JobScenarioReport:
      type: object
      properties:
        scenarioId:
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/ScenarioStatus'
        iterationDuration:
          $ref: '#/components/schemas/Duration'
        report:
          type: object
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              stacktrace:
                type: array
                items:
                  type: object
                  properties:
                    Type:
                      type: string
                    Line:
                      type: integer
                    Column:
                      type: integer
                    Literal:
                      type: string
    DelugeStatus:
      type: string
      enum:
        - "notStarted"
        - "inProgress"
        - "doneSuccess"
        - "interrupted"
        - "doneError"
    ScenarioStatus:
      type: string
      enum:
        - "notStarted"
        - "inProgress"
        - "doneSuccess"
        - "interrupted"
        - "doneError"
    Duration:
      type: string
      example: "100ms"
  securitySchemes:
    apikey:
      type: apiKey
      name: apikey
      in: header
